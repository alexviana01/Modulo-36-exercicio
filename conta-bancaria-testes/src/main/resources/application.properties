# ================================================
# Configurações Gerais da Aplicação
# ================================================
# Porta do servidor Tomcat (padrão 8080, mude se houver conflito)
server.port=8080

# Contexto da aplicação (ex.: /api para URLs como localhost:8080/api/contas)
server.servlet.context-path=/

# Ativar compressão para respostas (útil para APIs REST)
server.compression.enabled=true
server.compression.min-response-size=2048

# ================================================
# Configurações do Banco de Dados PostgreSQL (Principal)
# ================================================
# URL de conexão (seu banco local mod36Vendas)
spring.datasource.url=jdbc:postgresql://localhost:5432/mod36Vendas
spring.datasource.username=postgres
# Senha: Evite hardcoded em prod; use env vars como ${DB_PASSWORD}
spring.datasource.password=2025al
# Driver: Certifique-se de que a dependência está no pom.xml
spring.datasource.driver-class-name=org.postgresql.Driver

# Pool de Conexões (HikariCP - padrão do Spring Boot)
spring.datasource.hikari.maximum-pool-size=10  # Máximo de conexões simultâneas
spring.datasource.hikari.minimum-idle=5       # Mínimo de conexões ociosas
spring.datasource.hikari.idle-timeout=30000   # Tempo de ociosidade em ms
spring.datasource.hikari.max-lifetime=600000  # Vida máxima de uma conexão em ms
spring.datasource.hikari.connection-timeout=30000  # Timeout para obter conexão

# ================================================
# Configurações do JPA e Hibernate
# ================================================
# Modo DDL: update preserva dados existentes (seu original)
spring.jpa.hibernate.ddl-auto=update  # Opções: create, create-drop, validate, none
# Mostrar SQL no console (útil para debug)
spring.jpa.show-sql=true
# Formatar SQL para legibilidade
spring.jpa.properties.hibernate.format_sql=true
# Dialeto específico para PostgreSQL (seu original)
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# Gerar estatísticas do Hibernate (para monitoramento)
spring.jpa.properties.hibernate.generate_statistics=true
# Estratégia de naming para colunas/tabelas
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# ================================================
# Configurações de Logging
# ================================================
# Nível de log geral (DEBUG para mais detalhes durante dev)
logging.level.root=INFO
# Log detalhado para Spring Boot e Hibernate
logging.level.org.springframework=INFO
logging.level.org.hibernate=DEBUG  # Para ver queries SQL em detalhes
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE  # Para ver parâmetros bindados
# Arquivo de log (salva em logs/app.log)
logging.file.name=logs/app.log
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ================================================
# Configurações para Perfis (Dev, Test, Prod)
# ================================================
# Perfil ativo padrão (use --spring.profiles.active=dev ao rodar)
spring.profiles.active=dev

# Exemplo para perfil 'dev' (adicione em application-dev.properties se quiser separar)
# spring.datasource.url=jdbc:h2:mem:testdb  # Banco embutido H2 para testes rápidos
# spring.jpa.hibernate.ddl-auto=create-drop

# ================================================
# Configurações Adicionais para API e Segurança
# ================================================
# CORS: Permitir origens (útil se sua app for consumida por front-end)
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS

# Spring Security Básica (desative para dev, ative em prod)
# spring.security.user.name=admin
# spring.security.user.password=secret

# Actuator para Monitoramento (ex.: /actuator/health)
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always

# ================================================
# Configurações para Migrações de Schema (Flyway - Opcional)
# ================================================
# Ative se adicionar dependência Flyway no pom.xml
# spring.flyway.enabled=true
# spring.flyway.locations=classpath:db/migration

# ================================================
# Outras Configurações Úteis para Seu Projeto Bancário
# ================================================
# Timezone padrão para datas (útil para transações)
spring.jpa.properties.hibernate.jdbc.time_zone=America/Sao_Paulo
# Limite de tamanho para uploads (se precisar de arquivos em contas)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB